#########################################################
# Concurrency allows to run 1 cycle at a time
# If worflow is running, 2nd one will automatically go in pending state if concurrency is enabled
# If 1st running, 2nd in pending and 3rd is triggered then 2nd which was in pending will be cancelled and 
# only 3rd (latest) will run

  # If this is enabled it will cancel current running and start latest
  # cancel-in-progress: true

###########################################################
# You can use jobs.<job_id>.concurrency to ensure that only a single job or workflow using the same concurrency group will run at a time. 
# A concurrency group can be any string or expression. The expression can use any context except for the secrets context. 

# You can also specify concurrency at the workflow level. For more information, see concurrency.

# When a concurrent job or workflow is queued, if another job or workflow using the same concurrency group in the repository is in progress, the queued job or workflow will be pending. 
# Any previously pending job or workflow in the concurrency group will be canceled. To also cancel any currently running job or workflow in the same concurrency group, specify cancel-in-progress: true.
############################################################

name: Concurrency Test 2
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  # push:
  #   branches: [ master ]
  # pull_request:
  #   branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  wait:
    name: Wait
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Wait"
          sleep 5

  job1:
    runs-on: ubuntu-latest
    concurrency:
      group: build-and-test
      # cancel-in-progress: false
    steps:
      - run: sleep 10

  job2:
    runs-on: ubuntu-latest
    needs: wait
    concurrency:
      group: build-and-test
      # cancel-in-progress: false
    steps:
      - run: sleep 10
